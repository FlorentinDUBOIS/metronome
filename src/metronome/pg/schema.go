// Code generated by go-bindata.
// sources:
// src/metronome/pg/schema/extensions.sql
// src/metronome/pg/schema/tasks.sql
// src/metronome/pg/schema/tokens.sql
// src/metronome/pg/schema/users.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _extensionsSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x70\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x53\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x50\x2a\x2d\xcd\x4c\xd1\xcd\x2f\x2e\x2e\x50\xb2\xe6\x02\x04\x00\x00\xff\xff\xcc\xea\x5e\x9a\x2c\x00\x00\x00")

func extensionsSQLBytes() ([]byte, error) {
	return bindataRead(
		_extensionsSQL,
		"extensions.sql",
	)
}

func extensionsSQL() (*asset, error) {
	bytes, err := extensionsSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extensions.sql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1482487794, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tasksSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xdf\x6a\x83\x30\x18\xc5\xef\x7d\x8a\x73\x59\x61\x2f\x91\xd9\xcf\x2d\x4c\x13\x49\x52\x58\xaf\x24\xd4\x6c\x15\xa7\x2d\x26\x61\x7f\x9e\x7e\xa8\x65\x5b\x57\x73\x79\xce\xef\x07\x39\x7c\x99\x22\x66\x08\x86\xdd\x17\x04\x9e\x43\x48\x03\x7a\xe6\xda\x68\x04\xeb\x3b\x9f\x6c\x12\x00\x78\x8d\x6d\x83\xe0\x3e\xc2\x0c\x88\x5d\x51\xdc\xcd\x79\xf4\x6e\xac\xdb\x06\x71\xea\xaf\xab\xc1\xf6\x6e\x55\x19\x87\xb5\xd8\x1f\x8e\xae\x89\x6f\xab\xca\x61\x74\x36\xb8\xa6\xb6\x01\xa1\xed\x9d\x0f\xb6\x3f\xe3\xbd\x0d\xc7\x53\x5c\x12\x7c\x9d\x06\xf7\x4f\x5a\xff\x70\x26\x85\x36\x8a\x71\x61\x96\x7d\xf5\xb9\x73\x9f\xa8\x14\x2f\x99\xda\xe3\x89\xf6\xd8\x4c\x5b\xd3\x1b\xfa\xb2\xb4\x7e\xe9\x90\x4b\x45\xfc\x41\x2c\xf4\x25\x4f\x67\x7e\x7a\x8a\x72\x52\x24\x32\xd2\xb3\xe3\x7f\x11\x94\xcc\x64\x8f\xd0\xbc\xac\x0a\xfa\xe1\xa5\xc0\xae\xda\x4e\x47\x10\x12\x2c\x33\x5c\x8a\xbf\xdd\x96\x0a\xba\xea\xd2\xe4\x3b\x00\x00\xff\xff\x38\xb7\xb0\x54\xb4\x01\x00\x00")

func tasksSQLBytes() ([]byte, error) {
	return bindataRead(
		_tasksSQL,
		"tasks.sql",
	)
}

func tasksSQL() (*asset, error) {
	bytes, err := tasksSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tasks.sql", size: 436, mode: os.FileMode(420), modTime: time.Unix(1481895434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tokensSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xc1\x6e\xa3\x30\x10\x86\xef\x3c\xc5\x7f\x04\x69\x4f\x2b\xed\x5e\x72\xf2\xc2\x90\xb5\x4a\x0c\x05\x23\x25\x27\x44\x82\x93\xd0\x24\x80\x8c\x69\x92\x3e\x7d\x15\x83\xd2\x36\x2d\x17\xec\xff\xfb\x66\xa4\xf1\xf8\x29\x31\x49\x90\xec\x5f\x44\xe0\x21\x44\x2c\x41\x4b\x9e\xc9\x0c\xa6\x3d\xa8\xa6\x77\x5c\x07\xc0\x78\x81\x51\x17\x63\x15\x91\x47\xd1\x2f\x0b\x86\x5e\xe9\xa2\xae\x30\x0c\x75\xf5\x80\xcc\xb5\x53\xd8\xec\x4b\x5d\x6e\x8c\xd2\x78\x2d\xf5\xb5\x6e\x76\xee\xef\x3f\x7f\xbd\x07\x73\xa3\x55\x69\x54\x55\x94\x06\xa6\x3e\xa9\xde\x94\xa7\x0e\xe7\xda\xec\xdb\x61\x4c\xf0\xd6\x36\xea\x5e\x84\x80\x42\x96\x47\x12\x4d\x7b\x76\xbd\xb1\x85\x6e\x8f\xaa\xc7\x4b\xdf\x36\xeb\x31\xf0\x63\x91\xc9\x94\x71\x21\xa7\x49\x8a\xee\xa0\xae\x48\x52\xbe\x60\xe9\x0a\x4f\xb4\x82\x6b\x81\xf7\xcd\x9f\x66\x2a\xb6\x07\x84\x71\x4a\x7c\x2e\x46\x7d\xca\x3d\xeb\xdf\xbe\x94\x42\x4a\x49\xf8\x94\xd9\x9a\xfe\x43\xc1\x82\x49\xff\x3f\x32\xbe\x48\x22\xba\xfb\xb1\x40\x9e\x04\xb7\x07\x17\x31\x98\x2f\x79\x2c\x3e\xb3\x80\x22\xfa\xc2\xbc\x99\x33\x2d\x28\x17\xfc\x39\x27\x70\x11\xd0\xf2\xc7\x3d\x15\xf6\x57\xd4\xd5\xc5\x99\xba\x8d\x39\xf2\x8c\x8b\x39\xd6\x46\x2b\x65\xc9\x34\xb4\x3d\xdb\xb5\x67\x09\xf3\x09\xdd\xae\xa8\xd4\xb6\x1c\x8e\x66\xe6\xbc\x07\x00\x00\xff\xff\x49\x6f\x8d\x95\x15\x02\x00\x00")

func tokensSQLBytes() ([]byte, error) {
	return bindataRead(
		_tokensSQL,
		"tokens.sql",
	)
}

func tokensSQL() (*asset, error) {
	bytes, err := tokensSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tokens.sql", size: 533, mode: os.FileMode(420), modTime: time.Unix(1485163064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _usersSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\x2b\x21\x14\x86\xf7\x3c\xc5\x59\xce\x24\x77\x75\xa3\x6e\xba\xc2\x96\x1a\xe2\x48\xeb\x0c\x93\xb4\x2b\x42\xcb\xb1\x45\x5b\x98\x00\xd3\xb1\x3e\xbd\x29\x53\xdd\xe8\xc2\xdd\xc9\xcf\x07\xfc\x7c\x4c\x6b\x46\x25\x03\x49\xef\x2b\x06\x7c\x0e\x62\x21\x81\xad\x78\x23\x1b\xe8\x23\x86\x48\x0a\x02\x00\x79\x56\xd6\x40\xdf\x5b\x93\x19\xd1\x56\x15\xcc\xd8\x9c\xb6\x95\xcc\xa9\xda\xa1\xc3\xa0\x13\xaa\xd3\x4d\x51\xfe\xcb\xbb\x9c\x3e\x22\x6c\xf7\x3a\xe8\x6d\xc2\x00\x27\x1d\xce\xd6\xed\x8a\xff\xb7\x77\xe5\xf7\x21\x23\xd9\xe9\x18\x07\x1f\xcc\xdf\xe8\x6d\x40\x9d\xd0\x28\x9d\x20\xd9\x23\xc6\xa4\x8f\x1d\x0c\x36\xed\x7d\x3f\x26\xf0\xe1\x1d\xfe\xec\xe9\xfc\xf0\x55\x2d\xf8\x03\x46\x78\x8d\xde\x6d\xc6\x60\xba\x10\x8d\xac\x29\x17\x72\x7c\xb8\xea\xde\xf0\x0c\xcb\x9a\x3f\xd1\x7a\x0d\x8f\x6c\x0d\xc5\x55\x42\x49\xca\x09\x21\x57\x71\xad\xe0\xcf\x2d\x03\x2e\x66\x6c\xf5\x9b\x3f\x75\x71\xa0\xac\x79\xcf\x97\x2c\xc4\x98\x42\xdb\x70\xf1\x00\x9b\x14\x10\xf3\x42\x71\xc1\xca\x3c\xe6\xaf\x68\x96\x74\xca\xa0\xdb\x29\x83\x2f\xba\x3f\xa4\x09\xf9\x0c\x00\x00\xff\xff\x2a\xbb\xd2\xda\xa9\x01\x00\x00")

func usersSQLBytes() ([]byte, error) {
	return bindataRead(
		_usersSQL,
		"users.sql",
	)
}

func usersSQL() (*asset, error) {
	bytes, err := usersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "users.sql", size: 425, mode: os.FileMode(420), modTime: time.Unix(1482487794, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"extensions.sql": extensionsSQL,
	"tasks.sql":      tasksSQL,
	"tokens.sql":     tokensSQL,
	"users.sql":      usersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"extensions.sql": {extensionsSQL, map[string]*bintree{}},
	"tasks.sql":      {tasksSQL, map[string]*bintree{}},
	"tokens.sql":     {tokensSQL, map[string]*bintree{}},
	"users.sql":      {usersSQL, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
