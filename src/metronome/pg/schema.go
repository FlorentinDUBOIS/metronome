// Code generated by go-bindata.
// sources:
// src/metronome/pg/schema/tasks.sql
// src/metronome/pg/schema/users.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tasksSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xdf\x6a\x83\x30\x18\xc5\xef\x7d\x8a\x73\x59\x61\x2f\x91\xd9\xcf\x2d\x4c\x13\x49\x52\x58\xaf\x24\xd4\x6c\x15\xa7\x2d\x26\x61\x7f\x9e\x7e\xa8\x65\x5b\x57\x73\x79\xce\xef\x07\x39\x7c\x99\x22\x66\x08\x86\xdd\x17\x04\x9e\x43\x48\x03\x7a\xe6\xda\x68\x04\xeb\x3b\x9f\x6c\x12\x00\x78\x8d\x6d\x83\xe0\x3e\xc2\x0c\x88\x5d\x51\xdc\xcd\x79\xf4\x6e\xac\xdb\x06\x71\xea\xaf\xab\xc1\xf6\x6e\x55\x19\x87\xb5\xd8\x1f\x8e\xae\x89\x6f\xab\xca\x61\x74\x36\xb8\xa6\xb6\x01\xa1\xed\x9d\x0f\xb6\x3f\xe3\xbd\x0d\xc7\x53\x5c\x12\x7c\x9d\x06\xf7\x4f\x5a\xff\x70\x26\x85\x36\x8a\x71\x61\x96\x7d\xf5\xb9\x73\x9f\xa8\x14\x2f\x99\xda\xe3\x89\xf6\xd8\x4c\x5b\xd3\x1b\xfa\xb2\xb4\x7e\xe9\x90\x4b\x45\xfc\x41\x2c\xf4\x25\x4f\x67\x7e\x7a\x8a\x72\x52\x24\x32\xd2\xb3\xe3\x7f\x11\x94\xcc\x64\x8f\xd0\xbc\xac\x0a\xfa\xe1\xa5\xc0\xae\xda\x4e\x47\x10\x12\x2c\x33\x5c\x8a\xbf\xdd\x96\x0a\xba\xea\xd2\xe4\x3b\x00\x00\xff\xff\x38\xb7\xb0\x54\xb4\x01\x00\x00")

func tasksSQLBytes() ([]byte, error) {
	return bindataRead(
		_tasksSQL,
		"tasks.sql",
	)
}

func tasksSQL() (*asset, error) {
	bytes, err := tasksSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tasks.sql", size: 436, mode: os.FileMode(420), modTime: time.Unix(1481629001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _usersSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\xa9\x53\x22\xc1\x82\x80\xa5\x53\x68\x5d\x64\x11\x9c\x92\x38\x52\x3b\x59\x6e\x7d\xb4\x86\xd6\x8e\x6c\xa7\xa5\x3c\x3d\x8a\x53\x40\x02\x06\xb6\xd3\xef\xef\xec\xf3\x77\x93\x8a\xe4\x9c\x00\x59\x70\xc2\x6a\x5a\x32\xa0\x33\x60\x25\x07\xb2\xa0\x35\xaf\x61\xd4\x75\x5a\x5d\x5a\xef\xdb\xd1\x38\x49\xce\x30\xcf\xef\x0a\xf2\x03\xec\x3c\x3a\x9f\xa4\x09\x00\xc4\x5a\x68\x05\x7d\x6f\x64\x58\x53\x14\x30\x25\xb3\xbc\x29\x78\x4c\xc5\x06\x0d\x3a\x19\x50\x1c\xae\xd3\xec\x22\x76\x19\xb9\x47\x58\x6f\xa5\x93\xeb\x80\x0e\x0e\xd2\x9d\xb4\xd9\xa4\x57\x37\xb7\xd9\xd7\x25\x03\xd9\x4a\xef\x8f\xd6\xa9\xff\xd1\x6b\x87\x32\xa0\x12\x32\x40\xd0\x7b\xf4\x41\xee\x5b\x38\xea\xb0\xb5\xdd\x90\xc0\xbb\x35\xf8\x7b\x4e\x63\x8f\x9f\xa3\x39\xbb\x43\x0f\x2f\xde\x9a\xd5\x10\x4c\x4a\x56\xf3\x2a\xa7\x8c\x0f\x1f\x17\xed\x2b\x9e\x60\x5e\xd1\xc7\xbc\x5a\xc2\x03\x59\x42\x7a\x96\x90\x25\xd9\xb7\xb8\x86\xd1\xa7\x86\x00\x65\x53\xb2\xf8\xcb\x9f\xe8\x1d\x08\xad\xde\xe2\x23\x25\x1b\x52\x68\x6a\xca\xee\x61\x15\x1c\x62\x3c\x48\x7b\x2c\x8b\x65\x5c\x45\x3d\xcf\x27\x04\xda\x8d\x50\xf8\x2c\xbb\x5d\x18\x27\x1f\x01\x00\x00\xff\xff\xca\xf2\xb8\xf2\xd6\x01\x00\x00")

func usersSQLBytes() ([]byte, error) {
	return bindataRead(
		_usersSQL,
		"users.sql",
	)
}

func usersSQL() (*asset, error) {
	bytes, err := usersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "users.sql", size: 470, mode: os.FileMode(420), modTime: time.Unix(1481632927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tasks.sql": tasksSQL,
	"users.sql": usersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tasks.sql": {tasksSQL, map[string]*bintree{}},
	"users.sql": {usersSQL, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
