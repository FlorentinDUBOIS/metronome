// Code generated by go-bindata.
// sources:
// src/api/controllers/auth/schema/accessTokenQuery.json
// src/api/controllers/auth/schema/definitions.json
// src/api/controllers/task/schema/create.json
// src/api/controllers/task/schema/definitions.json
// src/api/controllers/task/schema/delete.json
// src/api/controllers/user/schema/create.json
// src/api/controllers/user/schema/definitions.json
// src/api/controllers/user/schema/edit.json
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authSchemaAccesstokenqueryJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xc1\xaa\xc2\x30\x10\x45\xf7\xf9\x8a\x61\xde\x5b\x16\xba\xef\x57\xb8\x17\x17\xd1\xdc\x40\xa4\x26\x71\x26\x45\x44\xfa\xef\x92\x54\x62\x77\x6e\x2f\xe7\x1c\x66\x5e\x86\x88\xb3\xa4\x0c\x29\x01\xca\x13\xd5\x85\x88\x17\x85\x44\x7b\x43\x5f\x88\xf8\x5f\xe0\x79\x22\xfe\x1b\x1d\x7c\x88\xa1\x84\x14\x75\xec\x64\xc3\xd6\x61\xf3\xb3\x55\x7d\x24\x71\xbf\xfd\x4e\x6e\xbe\xf9\x34\x58\x70\x5f\x82\xa0\x16\x8e\xdf\x73\x86\x5d\xfa\xd4\xb8\xf2\xcc\xf5\x4a\x4e\xe7\x2b\x2e\x85\xdb\x66\x9d\x6b\x75\x3b\x1f\xf6\xbf\x79\x3b\x2b\xcc\x6a\xde\x01\x00\x00\xff\xff\x6a\xf5\x6f\xd6\xf6\x00\x00\x00")

func authSchemaAccesstokenqueryJsonBytes() ([]byte, error) {
	return bindataRead(
		_authSchemaAccesstokenqueryJson,
		"auth/schema/accessTokenQuery.json",
	)
}

func authSchemaAccesstokenqueryJson() (*asset, error) {
	bytes, err := authSchemaAccesstokenqueryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/schema/accessTokenQuery.json", size: 246, mode: os.FileMode(416), modTime: time.Unix(1481131325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _authSchemaDefinitionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x2a\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xb2\x52\x00\xf1\x15\x14\x94\x4a\x2a\x0b\x40\x3c\xa5\xe2\x92\xa2\xcc\xbc\x74\x25\x1d\x88\x68\x6e\x66\x9e\x4f\x6a\x5e\x7a\x49\x86\x92\x95\x82\x21\x97\x82\x42\x2d\x48\x5c\xa9\x20\xb1\xb8\xb8\x3c\xbf\x28\x05\xa1\x1b\x43\x1d\x57\x2d\x17\x20\x00\x00\xff\xff\x7f\xd2\x80\x66\x69\x00\x00\x00")

func authSchemaDefinitionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_authSchemaDefinitionsJson,
		"auth/schema/definitions.json",
	)
}

func authSchemaDefinitionsJson() (*asset, error) {
	bytes, err := authSchemaDefinitionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/schema/definitions.json", size: 105, mode: os.FileMode(416), modTime: time.Unix(1481131329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _taskSchemaCreateJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xb1\xaa\xc3\x30\x0c\x45\x77\x7f\x85\xd0\x7b\x63\x20\x7b\xbe\xa2\x7b\xe9\xe0\x46\x0a\x55\x49\x6d\x57\xb6\x87\x52\xf2\xef\xc5\x76\x09\xc9\x94\x6e\xe6\x72\xce\xe5\x5a\x6f\x03\x80\x41\x7d\x60\x4d\xc2\x11\x07\x28\x09\x00\x0a\xad\x6f\x00\xfc\x57\x9e\x70\x00\xfc\xeb\x89\x27\x71\x92\xc4\xbb\xd8\x0b\x61\x05\x96\xae\x39\xce\x3e\xf8\xd8\xaa\xd4\xce\x8b\xe3\x8d\x29\xcf\x3f\xb8\x2b\xb9\xf3\xb3\xba\x63\xb5\x40\xcd\x32\x5f\x13\x95\x9f\x59\x94\xcb\x4f\xcf\x6d\x7c\xb7\x19\xd3\xb5\xe2\x4b\x45\xd3\x2b\x94\x79\xe8\xaf\x77\x1e\x13\xd6\xcc\x12\xd5\x6e\x3b\x9f\xb6\x07\x9c\xec\x1c\xd9\x2c\xe6\x13\x00\x00\xff\xff\xac\x15\xcc\xc3\x5b\x01\x00\x00")

func taskSchemaCreateJsonBytes() ([]byte, error) {
	return bindataRead(
		_taskSchemaCreateJson,
		"task/schema/create.json",
	)
}

func taskSchemaCreateJson() (*asset, error) {
	bytes, err := taskSchemaCreateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "task/schema/create.json", size: 347, mode: os.FileMode(416), modTime: time.Unix(1481131395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _taskSchemaDefinitionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x5d\x4b\x84\x40\x14\x7d\xf7\x57\x0c\x43\x0f\xde\xdd\x26\x3f\xb6\x0d\x9a\x17\x5f\x0a\x7a\x48\x88\xdc\x97\x9a\x6b\x20\x29\xbb\x42\x2b\xcb\xae\x0b\xc5\xea\x7f\x8f\xeb\x8e\xa6\x99\x56\x44\x20\xcc\x99\x73\x3f\xce\x01\xcf\x1c\x0c\xc6\x78\x1a\x73\xc9\x08\x31\xc6\xf3\xb7\x4d\xc2\x25\xe3\xbb\x7c\x9b\x66\x4b\x7e\x7a\x64\xd7\x69\x76\x9b\x64\xcb\x7c\xc5\x25\x73\x6a\x2e\x7a\x6d\x38\x77\x7e\xa1\xd9\x4d\x94\xe7\xc9\x36\xa3\x15\x4f\x88\xc1\xf4\x84\x1b\x8c\x95\x54\xe4\x59\xb4\x4e\xfe\x4f\xe8\x6c\xf2\x49\x6e\xf7\xbc\x4a\xe2\xfd\xcb\xb7\x92\xed\x45\xf7\x26\x62\x3c\x01\x44\x8b\xc0\xe1\xbc\x04\x61\xda\x9e\x72\xc4\x65\x58\x38\xca\x16\x6e\xd8\x22\x94\x23\xdc\x50\xd9\x04\x67\xca\x16\x4e\x08\x0b\xb3\x3a\x3d\xc4\xb8\x70\x95\x2d\x66\x21\x48\xa2\xe6\x15\xd5\xc1\x8f\x88\xd6\x9d\xe9\x49\xfa\x10\xe3\x29\x3c\x1c\x0f\xbf\xd0\x57\x7d\xfa\x50\xe8\xae\xba\xf1\x0a\x16\x0d\xbe\x81\x06\xfa\x1f\x30\x80\x66\x68\x7c\xe2\x27\x5d\x63\xcb\xbe\xd0\xac\x7b\xe8\xf2\x37\x9f\x63\xb2\xc3\x35\xbd\x73\x40\x7a\xb8\xd6\x9b\xeb\xfb\xec\x99\xeb\x39\xea\xd8\x00\xa0\x1c\x5d\xb7\x9a\x74\xa9\xe8\xfe\xe9\x00\x5a\xa1\xdd\x57\x41\xfc\xf5\x13\x69\x67\xd8\xa4\x77\x00\x12\xad\x2a\xc4\xc1\x54\xaf\x37\x4a\xe3\x3d\x00\x00\xff\xff\x1e\x24\x72\x43\xed\x03\x00\x00")

func taskSchemaDefinitionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_taskSchemaDefinitionsJson,
		"task/schema/definitions.json",
	)
}

func taskSchemaDefinitionsJson() (*asset, error) {
	bytes, err := taskSchemaDefinitionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "task/schema/definitions.json", size: 1005, mode: os.FileMode(416), modTime: time.Unix(1481131400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _taskSchemaDeleteJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x31\x0a\x02\x31\x10\x45\xfb\x9c\xe2\x33\x5a\x0a\xdb\xef\x29\xec\xc5\x22\x9a\x1f\x18\x59\x36\x71\x12\x0b\x91\xdc\x5d\x26\x85\xd8\x0d\x8f\x79\xef\x7f\x02\x20\xd5\x4a\xa5\x75\x65\x93\x15\x4e\x00\xd1\xf4\xbb\x01\x39\x1a\xb3\xac\x90\xc3\x92\x98\x75\xd7\xae\x65\x6f\x8b\x26\x99\x0f\x23\x00\xe3\xe4\x25\xe3\xf3\xa5\x46\x77\x2f\x9e\xb8\x4e\xda\xdf\x95\x6e\x97\xdb\x83\xf7\x2e\x93\xc5\x94\x66\x25\x6e\xe7\xff\xf5\x1c\xb7\xc6\x30\xc2\x37\x00\x00\xff\xff\xfc\x33\x8f\x95\x98\x00\x00\x00")

func taskSchemaDeleteJsonBytes() ([]byte, error) {
	return bindataRead(
		_taskSchemaDeleteJson,
		"task/schema/delete.json",
	)
}

func taskSchemaDeleteJson() (*asset, error) {
	bytes, err := taskSchemaDeleteJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "task/schema/delete.json", size: 152, mode: os.FileMode(420), modTime: time.Unix(1481131404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userSchemaCreateJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x10\x3d\x0e\x76\xdf\x53\x78\x17\x0f\xd5\xa6\x10\x99\x6d\x4d\x2a\x22\xb2\x77\x97\xa6\x32\x76\xdb\x31\x3f\xdf\xff\xf1\xe7\xeb\x00\xb0\x48\x2e\x24\x95\x49\x71\x82\x96\x00\x60\xf2\x0f\x5a\x2f\x00\x3c\x0a\x45\x9c\x00\x0f\x63\xa0\xc8\x89\x2b\xe7\xa4\xa3\x51\x86\x2c\x43\xef\x15\xaf\xfa\xce\x12\xf6\xbb\x2b\xd9\xfb\xee\xef\x40\xa1\xe7\x8b\x85\x9a\xe1\xdc\x67\x0c\x1b\xed\xc5\x98\xfa\x29\x6d\x1d\xe6\xeb\x9d\x6e\x15\x2d\xf3\x21\x98\xd9\xcf\xa7\xed\x3f\xd1\xcf\x4a\x6e\x71\xbf\x00\x00\x00\xff\xff\x5d\x9d\x92\xcc\xea\x00\x00\x00")

func userSchemaCreateJsonBytes() ([]byte, error) {
	return bindataRead(
		_userSchemaCreateJson,
		"user/schema/create.json",
	)
}

func userSchemaCreateJson() (*asset, error) {
	bytes, err := userSchemaCreateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/schema/create.json", size: 234, mode: os.FileMode(416), modTime: time.Unix(1481131424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userSchemaDefinitionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x00\xb1\x15\x14\x94\x4a\x2a\x0b\x40\x3c\xa5\xe2\x92\xa2\xcc\xbc\x74\x25\x1d\x88\x68\x6e\x66\x9e\x4f\x6a\x5e\x7a\x49\x86\x92\x95\x82\x21\x4c\x2c\xb1\x02\x2e\x66\x64\x6a\x06\x15\x2d\x48\x2c\x29\x49\x2d\xca\x03\x19\x11\x17\x13\x13\xac\xad\xa7\x65\x0f\xa2\x54\x94\xb8\x14\x14\x6a\x41\x6a\x94\x0a\x12\x8b\x8b\xcb\xf3\x8b\x52\xa8\x60\x27\xc8\x4c\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\xf9\x0a\x2c\x24\xc7\x00\x00\x00")

func userSchemaDefinitionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_userSchemaDefinitionsJson,
		"user/schema/definitions.json",
	)
}

func userSchemaDefinitionsJson() (*asset, error) {
	bytes, err := userSchemaDefinitionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/schema/definitions.json", size: 199, mode: os.FileMode(416), modTime: time.Unix(1481131427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userSchemaEditJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcd\x41\x0a\x02\x31\x0c\x85\xe1\x7d\x4f\xf1\x88\x2e\x85\xd9\xcf\x29\xbc\x42\xb5\x29\x54\x86\x49\x49\x02\x22\xd2\xbb\x4b\xba\x28\x6e\x3f\xfe\xe4\x7d\x13\x40\x5d\xa5\xb3\x7a\x63\xa3\x1d\x21\x61\xd9\xec\x2d\x5a\x96\x00\x74\x55\xae\xb4\x83\x2e\x5b\xe1\xda\xce\xe6\x4d\x4e\xdb\x56\x39\xb3\x91\x80\x71\x8b\xaf\xfe\xe9\x1c\xb5\x3c\x5e\xfc\x74\x9a\x96\x4b\x99\x57\xf9\xb8\xff\x6f\xd6\x7c\x18\xa7\x91\x7e\x01\x00\x00\xff\xff\x84\x7e\xa0\x3f\x8e\x00\x00\x00")

func userSchemaEditJsonBytes() ([]byte, error) {
	return bindataRead(
		_userSchemaEditJson,
		"user/schema/edit.json",
	)
}

func userSchemaEditJson() (*asset, error) {
	bytes, err := userSchemaEditJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/schema/edit.json", size: 142, mode: os.FileMode(416), modTime: time.Unix(1481131431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auth/schema/accessTokenQuery.json": authSchemaAccesstokenqueryJson,
	"auth/schema/definitions.json": authSchemaDefinitionsJson,
	"task/schema/create.json": taskSchemaCreateJson,
	"task/schema/definitions.json": taskSchemaDefinitionsJson,
	"task/schema/delete.json": taskSchemaDeleteJson,
	"user/schema/create.json": userSchemaCreateJson,
	"user/schema/definitions.json": userSchemaDefinitionsJson,
	"user/schema/edit.json": userSchemaEditJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"auth": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"accessTokenQuery.json": &bintree{authSchemaAccesstokenqueryJson, map[string]*bintree{}},
			"definitions.json": &bintree{authSchemaDefinitionsJson, map[string]*bintree{}},
		}},
	}},
	"task": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"create.json": &bintree{taskSchemaCreateJson, map[string]*bintree{}},
			"definitions.json": &bintree{taskSchemaDefinitionsJson, map[string]*bintree{}},
			"delete.json": &bintree{taskSchemaDeleteJson, map[string]*bintree{}},
		}},
	}},
	"user": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"create.json": &bintree{userSchemaCreateJson, map[string]*bintree{}},
			"definitions.json": &bintree{userSchemaDefinitionsJson, map[string]*bintree{}},
			"edit.json": &bintree{userSchemaEditJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

